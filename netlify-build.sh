#!/bin/bash
# Netlify build script for Flutter web

set -eo pipefail

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$REPO_ROOT"

FLUTTER_ROOT="${FLUTTER_ROOT:-/opt/buildhome/.flutter}"
FLUTTER_VERSION="${FLUTTER_VERSION:-3.24.4}"

function ensure_flutter() {
  if [ ! -d "$FLUTTER_ROOT/.git" ]; then
    echo "Installing Flutter SDK ($FLUTTER_VERSION) from scratch..."
    rm -rf "$FLUTTER_ROOT"
    git clone --branch "$FLUTTER_VERSION" --depth 1 https://github.com/flutter/flutter.git "$FLUTTER_ROOT"
    return
  fi

  if ! git -C "$FLUTTER_ROOT" rev-parse "refs/tags/$FLUTTER_VERSION" >/dev/null 2>&1; then
    echo "Fetching Flutter tag $FLUTTER_VERSION..."
    git -C "$FLUTTER_ROOT" fetch --depth 1 origin "refs/tags/$FLUTTER_VERSION:refs/tags/$FLUTTER_VERSION"
  fi

  echo "Switching Flutter SDK to $FLUTTER_VERSION..."
  git -C "$FLUTTER_ROOT" checkout --quiet "refs/tags/$FLUTTER_VERSION" || git -C "$FLUTTER_ROOT" checkout --quiet "$FLUTTER_VERSION"
}

ensure_flutter

export PATH="$FLUTTER_ROOT/bin:$PATH"

function write_flutter_env() {
  local env_file=".env"
  declare -A merged_env=()

  if [[ -f "$env_file" ]]; then
    while IFS='=' read -r key value || [[ -n "$key" ]]; do
      [[ -z "$key" ]] && continue
      [[ "$key" =~ ^# ]] && continue
      merged_env["$key"]="$value"
    done < "$env_file"
  fi

  local env_vars=(
    NEXT_PUBLIC_BLUEBUBBLES_HOST
    NEXT_PUBLIC_BLUEBUBBLES_URL
    NEXT_PUBLIC_BLUEBUBBLES_PASSWORD
    NEXT_PUBLIC_BLUEBUBBLES_AUTH_KEY
    BLUEBUBBLES_HOST
    BLUEBUBBLES_URL
    BLUEBUBBLES_PASSWORD
    BLUEBUBBLES_AUTH_KEY
    SUPABASE_URL
    SUPABASE_ANON_KEY
    SUPABASE_SERVICE_ROLE_KEY
    NEXT_PUBLIC_SUPABASE_URL
    NEXT_PUBLIC_SUPABASE_ANON_KEY
    NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY
  )

  local has_value=false
  for var in "${env_vars[@]}"; do
    if [[ -n "${!var:-}" ]]; then
      merged_env["$var"]="${!var}"
      has_value=true
    fi
  done

  if [[ "$has_value" == true ]]; then
    {
      echo "# Generated by Netlify build from environment variables"
      for key in "${!merged_env[@]}"; do
        printf '%s=%s\n' "$key" "${merged_env[$key]}"
      done | sort
    } > "$env_file"
    echo "Updated runtime .env configuration for Flutter web build."
  fi
}

flutter --version
flutter config --enable-web
flutter precache --web

echo "Installing dependencies..."
write_flutter_env
flutter pub get

if grep -q "build_runner" pubspec.yaml; then
  echo "Running code generation..."
  flutter pub run build_runner build --delete-conflicting-outputs
fi

echo "Building web app..."

declare -a dart_define_args=()
for var in \
  NEXT_PUBLIC_BLUEBUBBLES_HOST \
  NEXT_PUBLIC_BLUEBUBBLES_URL \
  NEXT_PUBLIC_BLUEBUBBLES_PASSWORD \
  NEXT_PUBLIC_BLUEBUBBLES_AUTH_KEY \
  BLUEBUBBLES_HOST \
  BLUEBUBBLES_URL \
  BLUEBUBBLES_PASSWORD \
  BLUEBUBBLES_AUTH_KEY \
  SUPABASE_URL \
  SUPABASE_ANON_KEY \
  SUPABASE_SERVICE_ROLE_KEY \
  NEXT_PUBLIC_SUPABASE_URL \
  NEXT_PUBLIC_SUPABASE_ANON_KEY \
  NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY; do
  if [[ -n "${!var:-}" ]]; then
    dart_define_args+=("--dart-define=${var}=${!var}")
  fi
done

flutter build web --release "${dart_define_args[@]}"

echo "Build complete! Output in build/web/"
